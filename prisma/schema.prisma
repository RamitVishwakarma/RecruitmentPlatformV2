generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model SocialLink {
  id        String  @id @default(uuid())
  name      String
  link      String
  userId    String
  isDeleted Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
}

model UserAptitudeDetails {
  id            String  @id @default(uuid())
  userId        String  @unique
  aptitudeScore Int
  isDeleted     Boolean @default(false)
  user          User    @relation(fields: [userId], references: [id])
}

model User {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?
  email              String               @unique
  name               String
  password           String //hashed password
  admissionNumber    String?
  photo              String?
  year               Int?
  resume             String?
  aptitudeScore      Int?
  aptitudeId         String?
  domain             String?
  socialLinkId       String?
  aptitudeStatus     Boolean              @default(false)
  projectStatus      Boolean              @default(false)
  reviewStatus       Boolean              @default(false)
  shortlistStatus    Boolean              @default(false)
  interviewStatus    Boolean              @default(false)
  isDeleted          Boolean              @default(false)
  emailVerified      Boolean              @default(false)
  googleId           String?              @unique
  RefreshToken       RefreshToken[]
  socialLinks        SocialLink[]
  aptitude           UserAptitudeDetails?
  verificationTokens VerificationToken[]
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Question {
  id                String   @id @default(uuid())
  questionShortDesc String
  questionLongDesc  String?
  aptitudeId        String
  isDeleted         Boolean  @default(false)
  options           Option[]
  aptitude          Aptitude @relation(fields: [aptitudeId], references: [id], onDelete: Cascade)
}

model Option {
  id         String   @id @default(uuid())
  optionText String
  isCorrect  Boolean
  questionId String
  isDeleted  Boolean  @default(false)
  question   Question @relation(fields: [questionId], references: [id])
}

model Aptitude {
  id                String     @id @default(uuid())
  aptitudeTitle     String
  aptitudeShortDesc String
  aptitudeLongDesc  String?
  aptitudeDomain    String
  aptitudeYear      Int
  aptitudeDuration  Int
  isDeleted         Boolean    @default(false)
  aptitudeQuestions Question[]
}

model BlackListToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
}
