generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model SocialLink {
  id        String  @id @default(uuid())
  name      String
  link      String
  userId    String
  isDeleted Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, name])
}

model UserAptitudeDetails {
  id            String  @id @default(uuid())
  userId        String  @unique
  aptitudeScore Int
  isDeleted     Boolean @default(false)
  user          User    @relation(fields: [userId], references: [id])
}

model User {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  email              String               @unique
  name               String
  password           String
  isAdmin            Boolean              @default(false)
  admissionNumber    String?
  photo              String?
  year               Int?
  resume             String?
  aptitudeScore      Int?
  aptitudeId         String?
  domain             String?
  socialLinkId       String?
  aptitudeStatus     Boolean              @default(false)
  projectStatus      Boolean              @default(false)
  reviewStatus       Boolean              @default(false)
  shortlistStatus    Boolean              @default(false)
  interviewStatus    Boolean              @default(false)
  isDeleted          Boolean              @default(false)
  googleId           String?              @unique
  RefreshToken       RefreshToken[]
  socialLinks        SocialLink[]
  aptitude           UserAptitudeDetails?
  verificationTokens VerificationToken[]
  phone              String?              @unique
  subscription       Subscription[]
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       Int
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Question {
  id                String   @id @default(uuid())
  questionShortDesc String
  questionLongDesc  String?
  aptitudeId        String
  isDeleted         Boolean  @default(false)
  options           Option[]
  aptitude          Aptitude @relation(fields: [aptitudeId], references: [id], onDelete: Cascade)
}

model Option {
  id         String   @id @default(uuid())
  optionText String
  isCorrect  Boolean
  questionId String
  isDeleted  Boolean  @default(false)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Aptitude {
  id                String     @id @default(uuid())
  aptitudeTitle     String
  aptitudeShortDesc String?
  aptitudeLongDesc  String?
  aptitudeDomain    String
  aptitudeYear      Int
  aptitudeDuration  Int
  isDeleted         Boolean    @default(false)
  aptitudeQuestions Question[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime?  @updatedAt
  beginsAt          DateTime?
  expiresAt         DateTime?
}

model BlackListToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
}

model Contest {
  id          String           @id @default(uuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  isDeleted   Boolean          @default(false)
  problems    ContestProblem[]
}

model CodingQuestion {
  id              String           @id @default(uuid())
  title           String
  description     String?
  difficulty      String
  constraints     String?
  inputFormat     String?
  outputFormat    String?
  sampleInput     String?
  sampleOutput    String?
  timeLimit       Int?
  memoryLimit     Int?
  isDeleted       Boolean          @default(false)
  contestProblems ContestProblem[]
}

model ContestProblem {
  id               String         @id @default(uuid())
  codingQuestionId String
  contestId        String
  year             Int
  isDeleted        Boolean        @default(false)
  codingQuestion   CodingQuestion @relation(fields: [codingQuestionId], references: [id])
  contest          Contest        @relation(fields: [contestId], references: [id])
  testCases        TestCase[]
}

model TestCase {
  id             String         @id @default(uuid())
  problemId      String
  input          String
  expectedOutput String
  isDeleted      Boolean        @default(false)
  contestProblem ContestProblem @relation(fields: [problemId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  url       String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Subscription {
  id       String @id @default(uuid())
  userId   String
  endpoint String @unique
  auth     String
  p256dh   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
